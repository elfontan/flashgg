* flashgg

** Introduction
   The basic instructions to setup and run flashgg are described here and in corresponding READMEs 
   in subdirectories of the repository.

   If you get stuck or have questions, please first consult the FAQs page [[https://cms-analysis.github.io/flashgg/][here]].
   
** Flashgg setup for the very low mass analysis in CMSSW_10_6_X:
   Get flashgg:
   #+BEGIN_EXAMPLE
   cmsrel CMSSW_10_6_29
   cd CMSSW_10_6_29/src/
   cmsenv
   git cms-init  
   git clone -b lowmass_106X https://github.com/dsperka/flashgg

   cd flashgg/
   git remote add myFlashGG https://github.com/elfontan/flashgg-1
   git remote -v 
   git fetch myFlashGG 
   git merge myFlashGG/lowMass_106X_2018UL
   source flashgg/setup_flashgg.sh 
   scram b -j 8
   #+END_EXAMPLE

** Examples to run on Run 2 2018 UL sample: MicroAOD STEP
 * Manual test for microAOD production with a single file:
   #+BEGIN_EXAMPLE
   cmsRun MicroAOD/test/microAODstd.py processType=[sig] datasetName=glugluh conditionsJSON=MetaData/data/MetaConditions/Era2018_UL_lowMassDiphotonAnalysis.json
   #+END_EXAMPLE
   
 * MicroAOD step on a dataset (note that you need a proper json file in the =campaign= directory):
   #+BEGIN_EXAMPLE
   ./prepareCrabJobs.py -V v0 -C analysisLM_UL18 --meta-conditions /afs/cern.ch/work/e/elfontan/private/DiPhotonAnalysis/myFlashGG/CMSSW_10_6_8/src/flashgg/MetaData/data/MetaConditions/Era2018_UL_lowMassDiphotonAnalysis.json  -O T2_US_MIT -o /store/user/elfontan -s campaigns/TEST_M70_UL.json --mkPilot
   #+END_EXAMPLE

   The jobs can be submitted and monitored with this kind of commands:
   #+BEGIN_EXAMPLE
   echo pilot_*.py | xargs -n 1 crab submit                       ## it will submit the pilot test crab jobs
   echo crabConfig_v0_GluGluHToGG_M*.py | xargs -n 1 crab submit  ## submission of the signal jobs
   echo crab_v0_GluGluHToGG_M* | xargs -n 1 crab status           ## to check the status of the jobs
   #+END_EXAMPLE

   The output is located in DAS in the =prod/phys03= database in the form:
   #+BEGIN_EXAMPLE
   /GluGluHToGG_M70_TuneCP5_13TeV-amcatnloFXFX-pythia8/elfontan-analysisLM_UL18-v0-v0-RunIISummer20UL18MiniAODv2-106X_upgrade2018_realistic_v16_L1v1-v1-82689a8dd9f3f8660dbba0021defef47/USER
   #+END_EXAMPLE

** Examples to run on Run 2 2018 UL sample: Flashgg STEP

 * First you need to create a catalogue for the newly produced dataset. From the =flashgg= directory, run
   #+BEGIN_EXAMPLE
   fggManageSamples.py -C analysisLM_UL18 import '/GluGluHToGG_M*/elfontan-analysisLM_UL18*/USER'

   #+END_EXAMPLE
   The output will be located in a subdirectory of =MetaData/data= with the same name of the campaign, e.g.:
   #+BEGIN_EXAMPLE
   /afs/cern.ch/work/e/elfontan/private/DiPhotonAnalysis/myFlashGG/CMSSW_10_6_8/src/flashgg/MetaData/data/analysisLM_UL18/datasets.json 
   #+END_EXAMPLE   


 * Then, you can prepare the configuration file to launch your jobs and produce the final miniTrees. Note that the relevant ingredients for this step are: 
  * [1] the name of the campaign (and the PU profile coherent with the era under consideration: make sure to use the UL one!); 
  * [2] the name of the MetaCondition file: at the moment use [[https://github.com/elfontan/flashgg/blob/lowMass_106X_2018UL/MetaData/data/MetaConditions/Era2018_UL_lowMassDiphotonAnalysis_noDiphotonBoundaries.json][Era2018_UL_lowMassDiphotonAnalysis_noDiphotonBoundaries]] to run without any categorization; 
  * [3] the name of the =Systematics= configuration file in the Metaconditions: [[https://github.com/elfontan/flashgg/blob/lowMass_106X_2018UL/Systematics/python/flashggDiPhotonSystematics2018LM_UL_cfi.py][flashggDiPhotonSystematics2018LM_UL_cfi]]. 
      
 * *NOTE 1*: It is crucial at this stage to choose properly the name of the process because some steps and filters (like for example the =PromptFakeFilter=) run only for certain =processId=. If you are ntuplizing a gJets sample, use for example =gjets_promptfake=, while if you are working with QCD, you can use for example =qcd_fakefake=.

 * *NOTE 2*: The latest scales and smearing files used by the mass measurement team is not centrally available. Copy them from =~jtao/public/ForElisa/Run2018_09Sep2021_RunFineEtaR9Et_stochastic_oldFormat*= to =EgammaAnalysis/ElectronTools/data/ScalesSmearings=.

 * *Technical note*: copying the proxy file to the working node is not yet supported when using HTCondor as bacth system. Therefore the user must set the =X509_USER_PROXY= environment variable and run with the =--no-copy-proxy= option
   #+BEGIN_EXAMPLE
   cd Systematics/test
   voms-proxy-init -voms cms --valid 168:00
   cp /tmp/MYPROXY ~/
   export X509_USER_PROXY=~/MYPROXY
   fggRunJobs.py --load analysisLM_UL18.json -d outdir_analysisLM_UL18 workspaceStd.py -n 300 -q workday --no-copy-proxy --no-use-tarball
   #+END_EXAMPLE 

