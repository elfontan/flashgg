* flashgg

** Introduction
   The basic instructions to setup and run flashgg are described here and in corresponding READMEs 
   in subdirectories of the repository.

   If you get stuck or have questions, please first consult the FAQs page [[https://cms-analysis.github.io/flashgg/][here]].
   
** Flashgg setup for the very low mass analysis in CMSSW_10_6_8:
   Get flashgg:
   #+BEGIN_EXAMPLE
   export SCRAM_ARCH=slc7_amd64_gcc700
   cmsrel CMSSW_10_6_8
   cd CMSSW_10_6_8/src/
   cmsenv
   git cms-init  
   git clone -b lowmass_106X https://github.com/dsperka/flashgg
   source flashgg/setup_flashgg.sh 
   cd flashgg/
   git remote add myFlashGG git@github.com:elfontan/flashgg-1.git
   git remote -v 
   git fetch myFlashGG 
   git merge myFlashGG/lowMass_106X_2018Legacy
   cd ../
   scram b -j 8
   #+END_EXAMPLE

** Examples to run on Run 2 2018 Legacy sample:
 * Manual test for microAOD production with a single file:
   #+BEGIN_EXAMPLE
   cmsRun MicroAOD/test/microAODstd.py processType=[sig] datasetName=glugluh conditionsJSON=MetaData/data/MetaCondition/Era2018_Legacy_lowMassDiphotonAnalysis.json
   #+END_EXAMPLE
   
 * MicroAOD step on a dataset (note that you need a proper json file in the =campaign= directory):
   #+BEGIN_EXAMPLE
   ./prepareCrabJobs.py -V v0 -C analysisLM_Leg18_wULframework --meta-conditions /afs/cern.ch/work/e/elfontan/private/DiPhotonAnalysis/Legacy2018_myFlashGG/CMSSW_10_6_8/src/flashgg/MetaData/data/MetaConditions/Era2018_Legacy_lowMassDiphotonAnalysis.json -O T2_US_MIT -o /store/user/elfontan -s campaigns/TEST_M70_Legacy.json --mkPilot
   #+END_EXAMPLE

   The output is located in DAS in the =prod/phys03= database in the form:
   #+BEGIN_EXAMPLE
   /GluGluHToGG_M70_TuneCP5_13TeV-amcatnloFXFX-pythia8/elfontan-analysisLM_Leg18_wULframework-v0-v0-RunIIAutumn18MiniAOD-102X_upgrade2018_realistic_v15-v1-52b7f6f2f6939c998dbd155c9278c972/USER
   #+END_EXAMPLE

 * Flashgg step:
   
   First you need to create a catalogue for the newly produced dataset. From the =flashgg= directory, run
   #+BEGIN_EXAMPLE
   fggManageSamples.py -C analysisLM_Leg18_wULframework import '/GluGluHToGG_M*/elfontan-analysisLM_Leg18_wULframework*/USER'
   #+END_EXAMPLE
   The output will be located in a subdirectory of =MetaData/data= with the same name of the campaign, e.g.:
   #+BEGIN_EXAMPLE
   /afs/cern.ch/work/e/elfontan/private/DiPhotonAnalysis/Legacy2018_myFlashGG/CMSSW_10_6_8/src/flashgg/MetaData/data/analysisLM_Leg18_wULframework/datasets.json   
   #+END_EXAMPLE   

   Finally, you can launch your jobs to produce the final miniTrees.
   *Note: copying the proxy file to the working node is not yet supported when using HTCondor as bacth system. Therefore the user must set*
   *the =X509_USER_PROXY= environment variable and run with the =--no-copy-proxy= option*
   #+BEGIN_EXAMPLE
   cd Systematics/test
   voms-proxy-init -voms cms --valid 168:00
   cp /tmp/MYPROXY ~/
   export X509_USER_PROXY=~/MYPROXY
   fggRunJobs.py --load analysisLM_Leg18_wULframework.json -d outdir_analysisLM_Leg18_wULframework workspaceStd.py -n 300 -q workday --no-copy-proxy --no-use-tarball  
   #+END_EXAMPLE 
